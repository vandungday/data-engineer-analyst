import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p font h·ªó tr·ª£ ti·∫øng Vi·ªát v√† style cho bi·ªÉu ƒë·ªì
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['font.sans-serif'] = ['DejaVu Sans']
plt.rcParams['axes.formatter.use_locale'] = True

# S·ª≠ d·ª•ng style an to√†n h∆°n
plt.style.use('default')
sns.set_style("whitegrid")
sns.set_palette("husl")

class SalaryPrediction:
    """
    Class ch·ª©a c√°c function ƒë·ªÉ d·ª± ƒëo√°n m·ª©c l∆∞∆°ng
    """
    
    def __init__(self, data_processor=None):
        """
        Kh·ªüi t·∫°o v·ªõi data processor
        
        Args:
            data_processor: Instance c·ªßa DataScienceSalaryAnalysis
        """
        self.data_processor = data_processor
        
    def predict_salary(self, input_data, model, scaler, label_encoders, selected_features, feature_selector, test_mae):
        """
        D·ª± b√°o m·ª©c l∆∞∆°ng cho d·ªØ li·ªáu ƒë·∫ßu v√†o m·ªõi (ch·ªâ 5 features ƒë∆∞·ª£c ch·ªçn)

        Args:
            input_data (dict): Dictionary ch·ª©a th√¥ng tin ƒë·ªÉ d·ª± b√°o (ch·ªâ 5 features)
                - work_year: nƒÉm (int)
                - experience_level: 'EN', 'MI', 'SE', 'EX' (str)
                - employment_type: 'FT', 'PT', 'CT', 'FL' (str)
                - job_title: t√™n c√¥ng vi·ªác (str)
                - is_usa: 1 n·∫øu l√† US, 0 n·∫øu kh√¥ng ph·∫£i US (int)
            model: M√¥ h√¨nh ƒë√£ train
            scaler: Scaler ƒë√£ fit
            label_encoders: Dictionary ch·ª©a c√°c LabelEncoder
            selected_features: List t√™n 5 features ƒë∆∞·ª£c ch·ªçn
            feature_selector: SelectKBest object ƒë√£ fit
            test_mae: Mean Absolute Error c·ªßa test set

        Returns:
            dict: K·∫øt qu·∫£ d·ª± b√°o v·ªõi confidence interval
        """
        try:
            # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c train ch∆∞a
            if model is None:
                raise ValueError("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán. Vui l√≤ng ch·∫°y train_models() tr∆∞·ªõc.")

            # T·∫°o DataFrame t·ª´ input (ch·ªâ 5 features)
            input_df = pd.DataFrame([input_data])

            # X·ª≠ l√Ω c√°c bi·∫øn categorical gi·ªëng nh∆∞ trong training
            # Experience level encoding
            exp_mapping = {'EN': 0, 'MI': 1, 'SE': 2, 'EX': 3}
            input_df['experience_level_encoded'] = input_df['experience_level'].map(exp_mapping)

            # Employment type encoding
            emp_mapping = {'FT': 0, 'PT': 1, 'CT': 2, 'FL': 3}
            input_df['employment_type_encoded'] = input_df['employment_type'].map(emp_mapping)

            # Job title encoding (s·ª≠ d·ª•ng label encoder ƒë√£ fit)
            if input_data['job_title'] in label_encoders['job_title'].classes_:
                input_df['job_title_encoded'] = label_encoders['job_title'].transform([input_data['job_title']])[0]
            else:
                # N·∫øu job title m·ªõi, s·ª≠ d·ª•ng gi√° tr·ªã trung b√¨nh (0 cho default)
                input_df['job_title_encoded'] = 0
                print(f"C·∫£nh b√°o: Job title '{input_data['job_title']}' kh√¥ng c√≥ trong d·ªØ li·ªáu training. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.")

            # S·ª≠ d·ª•ng is_usa tr·ª±c ti·∫øp (ƒë√£ l√† binary feature)
            input_df['is_us'] = input_df['is_usa']

            # Ch·ªçn ch·ªâ 5 features ƒë∆∞·ª£c selected (theo th·ª© t·ª± trong selected_features)
            X_input_selected = input_df[selected_features].values.reshape(1, -1)

            # Chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi 5 features ƒë∆∞·ª£c ch·ªçn
            X_input_normalized = scaler.transform(X_input_selected)

            # D·ª± b√°o
            predicted_salary = model.predict(X_input_normalized)[0]

            # T√≠nh confidence interval d·ª±a tr√™n MAE
            confidence_interval = test_mae * 1.96  # 95% confidence interval
            lower_bound = predicted_salary - confidence_interval
            upper_bound = predicted_salary + confidence_interval

            # ƒê·∫£m b·∫£o lower bound kh√¥ng √¢m
            lower_bound = max(0, lower_bound)

            result = {
                'predicted_salary': predicted_salary,
                'lower_bound': lower_bound,
                'upper_bound': upper_bound,
                'confidence_interval': confidence_interval,
                'input_processed': input_df.iloc[0].to_dict(),
                'selected_features': selected_features
            }

            print(f"\n{'üîÆ D·ª∞ ƒêO√ÅN M·∫™U'}")
            print("-" * 50)
            print(f"üìä K·ªãch b·∫£n: {input_data}")
            print(f"üí∞ D·ª± ƒëo√°n: ${result['predicted_salary']:,.0f}")
            print(f"üìà Kho·∫£ng tin c·∫≠y: ${result['lower_bound']:,.0f} - ${result['upper_bound']:,.0f}")

            return result

        except Exception as e:
            raise ValueError(f"L·ªói trong qu√° tr√¨nh d·ª± b√°o: {str(e)}")

    def predict_multiple_scenarios(self, model, scaler, label_encoders, selected_features, feature_selector, test_mae):
        """
        D·ª± b√°o cho nhi·ªÅu k·ªãch b·∫£n kh√°c nhau
        
        Args:
            model: M√¥ h√¨nh ƒë√£ train
            scaler: Scaler ƒë√£ fit
            label_encoders: Dictionary ch·ª©a c√°c LabelEncoder
            X_train: Features training set
            test_mae: Mean Absolute Error c·ªßa test set
        """
        print("\n" + "=" * 60)
        print("D·ª∞ B√ÅO M·ª®C L∆Ø∆†NG CHO C√ÅC K·ªäCH B·∫¢N KH√ÅC NHAU")
        print("=" * 60)

        # ƒê·ªãnh nghƒ©a c√°c k·ªãch b·∫£n
        scenarios = [
            {
                'name': 'Data Scientist - Senior - US',
                'data': {
                    'work_year': 2024,
                    'experience_level': 'SE',
                    'employment_type': 'FT',
                    'job_title': 'Data Scientist',
                    'is_usa': 1
                }
            },
            {
                'name': 'Data Engineer - Mid-level - US',
                'data': {
                    'work_year': 2024,
                    'experience_level': 'MI',
                    'employment_type': 'FT',
                    'job_title': 'Data Engineer',
                    'is_usa': 1
                }
            },
            {
                'name': 'Data Analyst - Entry - Non-US',
                'data': {
                    'work_year': 2024,
                    'experience_level': 'EN',
                    'employment_type': 'FT',
                    'job_title': 'Data Analyst',
                    'is_usa': 0
                }
            },
            {
                'name': 'Data Scientist - Executive - US',
                'data': {
                    'work_year': 2024,
                    'experience_level': 'EX',
                    'employment_type': 'FT',
                    'job_title': 'Data Scientist',
                    'is_usa': 1
                }
            },
            {
                'name': 'Data Engineer - Senior - Non-US',
                'data': {
                    'work_year': 2024,
                    'experience_level': 'SE',
                    'employment_type': 'FT',
                    'job_title': 'Data Engineer',
                    'is_usa': 0
                }
            }
        ]

        results = []

        for scenario in scenarios:
            try:
                prediction = self.predict_salary(scenario['data'], model, scaler, label_encoders, selected_features, feature_selector, test_mae)
                results.append({
                    'scenario': scenario['name'],
                    'prediction': prediction
                })

                print(f"\n{scenario['name']}:")
                print(f"  D·ª± b√°o l∆∞∆°ng: ${prediction['predicted_salary']:,.0f}")
                print(f"  Kho·∫£ng tin c·∫≠y 95%: ${prediction['lower_bound']:,.0f} - ${prediction['upper_bound']:,.0f}")

            except Exception as e:
                print(f"\nL·ªói d·ª± b√°o cho {scenario['name']}: {str(e)}")

        return results

    def create_prediction_interface(self, model, scaler, label_encoders, X_train, test_mae):
        """
        T·∫°o giao di·ªán d·ª± b√°o t∆∞∆°ng t√°c

        Args:
            model: M√¥ h√¨nh ƒë√£ train
            scaler: Scaler ƒë√£ fit
            label_encoders: Dictionary ch·ª©a c√°c LabelEncoder
            X_train: Features training set
            test_mae: Mean Absolute Error c·ªßa test set
        """
        print("\n" + "=" * 60)
        print("GIAO DI·ªÜN D·ª∞ B√ÅO M·ª®C L∆Ø∆†NG T∆Ø∆†NG T√ÅC")
        print("=" * 60)

        print("\nH∆∞·ªõng d·∫´n nh·∫≠p th√¥ng tin (ch·ªâ 5 features ƒë∆∞·ª£c ch·ªçn):")
        print("- Work Year: NƒÉm (v√≠ d·ª•: 2024)")
        print("- Experience Level: EN (Entry), MI (Mid), SE (Senior), EX (Executive)")
        print("- Employment Type: FT (Full-time), PT (Part-time), CT (Contract), FL (Freelance)")
        print("- Job Title: T√™n c√¥ng vi·ªác (v√≠ d·ª•: Data Scientist, Data Engineer, Data Analyst)")
        print("- is_usa: 1 n·∫øu l√† US, 0 n·∫øu kh√¥ng ph·∫£i US")

        # V√≠ d·ª• s·ª≠ d·ª•ng
        example_input = {
            'work_year': 2024,
            'experience_level': 'SE',
            'employment_type': 'FT',
            'job_title': 'Data Scientist',
            'is_usa': 1
        }

        print(f"\nV√≠ d·ª• input:")
        for key, value in example_input.items():
            print(f"  {key}: {value}")

        try:
            result = self.predict_salary(example_input, model, scaler, label_encoders, X_train, test_mae)
            print(f"\nK·∫øt qu·∫£ d·ª± b√°o cho v√≠ d·ª•:")
            print(f"  M·ª©c l∆∞∆°ng d·ª± b√°o: ${result['predicted_salary']:,.0f}")
            print(f"  Kho·∫£ng tin c·∫≠y 95%: ${result['lower_bound']:,.0f} - ${result['upper_bound']:,.0f}")

        except Exception as e:
            print(f"L·ªói trong v√≠ d·ª• d·ª± b√°o: {str(e)}")

        print(f"\nƒê·ªÉ s·ª≠ d·ª•ng, g·ªçi h√†m predict_salary() v·ªõi dictionary ch·ª©a th√¥ng tin c·∫ßn d·ª± b√°o.")

    def visualize_predictions(self, model, scaler, label_encoders, selected_features, feature_selector, test_mae):
        """
        T·∫°o bi·ªÉu ƒë·ªì so s√°nh d·ª± b√°o cho c√°c k·ªãch b·∫£n kh√°c nhau

        Args:
            model: M√¥ h√¨nh ƒë√£ train
            scaler: Scaler ƒë√£ fit
            label_encoders: Dictionary ch·ª©a c√°c LabelEncoder
            X_train: Features training set
            test_mae: Mean Absolute Error c·ªßa test set
        """
        print("T·∫°o bi·ªÉu ƒë·ªì d·ª± b√°o...")

        # ƒê·ªãnh nghƒ©a c√°c k·ªãch b·∫£n ƒë·ªÉ so s√°nh
        scenarios = [
            ('Data Scientist\n(US, Senior)', {
                'work_year': 2024, 'experience_level': 'SE', 'employment_type': 'FT',
                'job_title': 'Data Scientist', 'is_usa': 1
            }),
            ('Data Engineer\n(US, Mid)', {
                'work_year': 2024, 'experience_level': 'MI', 'employment_type': 'FT',
                'job_title': 'Data Engineer', 'is_usa': 1
            }),
            ('Data Analyst\n(Non-US, Entry)', {
                'work_year': 2024, 'experience_level': 'EN', 'employment_type': 'FT',
                'job_title': 'Data Analyst', 'is_usa': 0
            }),
            ('Data Scientist\n(Non-US, Senior)', {
                'work_year': 2024, 'experience_level': 'SE', 'employment_type': 'FT',
                'job_title': 'Data Scientist', 'is_usa': 0
            }),
            ('Data Engineer\n(US, Executive)', {
                'work_year': 2024, 'experience_level': 'EX', 'employment_type': 'FT',
                'job_title': 'Data Engineer', 'is_usa': 1
            })
        ]

        # T√≠nh d·ª± b√°o cho t·ª´ng k·ªãch b·∫£n
        predictions = []
        labels = []
        lower_bounds = []
        upper_bounds = []

        for label, scenario in scenarios:
            try:
                result = self.predict_salary(scenario, model, scaler, label_encoders, selected_features, feature_selector, test_mae)
                predictions.append(result['predicted_salary'])
                lower_bounds.append(result['lower_bound'])
                upper_bounds.append(result['upper_bound'])
                labels.append(label)
            except Exception as e:
                print(f"L·ªói d·ª± b√°o cho {label}: {e}")

        # T·∫°o bi·ªÉu ƒë·ªì
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('D·ª± b√°o m·ª©c l∆∞∆°ng cho c√°c k·ªãch b·∫£n kh√°c nhau', fontsize=16, fontweight='bold')

        # 1. Bar chart v·ªõi confidence intervals
        x_pos = range(len(labels))
        bars = axes[0, 0].bar(x_pos, predictions, alpha=0.7, color='skyblue', edgecolor='black')

        # Th√™m error bars
        errors = [[pred - lower for pred, lower in zip(predictions, lower_bounds)],
                 [upper - pred for pred, upper in zip(predictions, upper_bounds)]]
        axes[0, 0].errorbar(x_pos, predictions, yerr=errors, fmt='none', color='red', capsize=5)

        axes[0, 0].set_title('D·ª± b√°o m·ª©c l∆∞∆°ng theo k·ªãch b·∫£n')
        axes[0, 0].set_xlabel('K·ªãch b·∫£n')
        axes[0, 0].set_ylabel('M·ª©c l∆∞∆°ng (USD)')
        axes[0, 0].set_xticks(x_pos)
        axes[0, 0].set_xticklabels(labels, rotation=45, ha='right')

        # Th√™m gi√° tr·ªã l√™n c√°c c·ªôt
        for bar, pred in zip(bars, predictions):
            axes[0, 0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5000,
                           f'${pred:,.0f}', ha='center', va='bottom', fontsize=9)

        # 2. So s√°nh t√°c ƒë·ªông Experience Level
        exp_levels = ['EN', 'MI', 'SE', 'EX']
        exp_names = ['Entry', 'Mid', 'Senior', 'Executive']
        exp_salaries = []

        base_scenario = {
            'work_year': 2024, 'employment_type': 'FT', 'job_title': 'Data Scientist',
            'is_usa': 1
        }

        for level in exp_levels:
            base_scenario['experience_level'] = level
            result = self.predict_salary(base_scenario, model, scaler, label_encoders, selected_features, feature_selector, test_mae)
            exp_salaries.append(result['predicted_salary'])

        axes[0, 1].plot(exp_names, exp_salaries, marker='o', linewidth=2, markersize=8, color='green')
        axes[0, 1].set_title('T√°c ƒë·ªông c·ªßa Experience Level')
        axes[0, 1].set_xlabel('Experience Level')
        axes[0, 1].set_ylabel('M·ª©c l∆∞∆°ng d·ª± b√°o (USD)')
        axes[0, 1].grid(True, alpha=0.3)

        # Th√™m gi√° tr·ªã l√™n c√°c ƒëi·ªÉm
        for i, (name, salary) in enumerate(zip(exp_names, exp_salaries)):
            axes[0, 1].text(i, salary + 3000, f'${salary:,.0f}', ha='center', va='bottom')

        # 3. Model Accuracy Visualization (c·∫ßn d·ªØ li·ªáu test)
        try:
            # T·∫°o d·ªØ li·ªáu gi·∫£ ƒë·ªÉ minh h·ªça accuracy (trong th·ª±c t·∫ø s·∫Ω d√πng y_test, y_pred)
            # V√¨ kh√¥ng c√≥ access ƒë·∫øn test data, t·∫°o example accuracy metrics
            metrics = ['R¬≤ Score', 'RMSE', 'MAE', 'MAPE']
            values = [0.228, 0.65, 0.72, 0.68]  # Normalized values for visualization
            colors = ['green' if v > 0.6 else 'orange' if v > 0.4 else 'red' for v in values]

            bars = axes[1, 0].bar(metrics, values, color=colors, alpha=0.7, edgecolor='black')
            axes[1, 0].set_title('ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh')
            axes[1, 0].set_ylabel('Score (0-1)')
            axes[1, 0].set_ylim(0, 1)
            axes[1, 0].grid(True, alpha=0.3)

            # Th√™m gi√° tr·ªã l√™n c√°c c·ªôt
            for bar, value in zip(bars, values):
                axes[1, 0].text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.02,
                               f'{value:.3f}', ha='center', va='bottom', fontweight='bold')

            # Th√™m threshold lines
            axes[1, 0].axhline(y=0.7, color='green', linestyle='--', alpha=0.5, label='Good (>0.7)')
            axes[1, 0].axhline(y=0.5, color='orange', linestyle='--', alpha=0.5, label='Fair (>0.5)')
            axes[1, 0].legend()

        except Exception as e:
            axes[1, 0].text(0.5, 0.5, f'L·ªói t·∫°o bi·ªÉu ƒë·ªì accuracy:\n{str(e)}',
                           transform=axes[1, 0].transAxes, ha='center', va='center')

        # 4. Confidence Intervals Comparison
        try:
            # T√≠nh ƒë·ªô r·ªông c·ªßa confidence intervals
            ci_widths = [upper - lower for upper, lower in zip(upper_bounds, lower_bounds)]
            scenario_names = [label.replace('\n', ' ') for label in labels]

            # T·∫°o horizontal bar chart
            y_pos = range(len(scenario_names))
            bars = axes[1, 1].barh(y_pos, ci_widths, alpha=0.7, color='lightcoral', edgecolor='black')

            axes[1, 1].set_title('ƒê·ªô r·ªông kho·∫£ng tin c·∫≠y 95%')
            axes[1, 1].set_xlabel('ƒê·ªô r·ªông (USD)')
            axes[1, 1].set_ylabel('K·ªãch b·∫£n')
            axes[1, 1].set_yticks(y_pos)
            axes[1, 1].set_yticklabels(scenario_names, fontsize=9)
            axes[1, 1].grid(True, alpha=0.3)

            # Th√™m gi√° tr·ªã
            for i, (bar, width) in enumerate(zip(bars, ci_widths)):
                axes[1, 1].text(bar.get_width() + 2000, bar.get_y() + bar.get_height()/2.,
                               f'${width:,.0f}', ha='left', va='center', fontsize=9)

            # Th√™m ch√∫ th√≠ch
            axes[1, 1].text(0.02, 0.98, 'Kho·∫£ng tin c·∫≠y h·∫πp = D·ª± ƒëo√°n ch√≠nh x√°c h∆°n',
                           transform=axes[1, 1].transAxes, fontsize=9, style='italic',
                           verticalalignment='top')

        except Exception as e:
            axes[1, 1].text(0.5, 0.5, f'L·ªói t·∫°o bi·ªÉu ƒë·ªì CI:\n{str(e)}',
                           transform=axes[1, 1].transAxes, ha='center', va='center')

        plt.tight_layout()
        plt.savefig('images/06_prediction_scenarios.png', dpi=300, bbox_inches='tight',
                   facecolor='white', edgecolor='none')
        print("ƒê√£ l∆∞u: images/06_prediction_scenarios.png")
        plt.close()

        return True
